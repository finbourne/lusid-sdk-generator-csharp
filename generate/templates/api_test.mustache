{{>partial_header}}
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
{{#useRestSharp}}
using RestSharp;
{{/useRestSharp}}
using Xunit;
using Fare;

using {{packageName}}.Client;
using {{packageName}}.{{apiPackage}};
using {{packageName}}.{{modelPackage}};
using Newtonsoft.Json;
using System.Linq;
using System.Text.RegularExpressions;
using Newtonsoft.Json.Linq;

namespace {{packageName}}.Test.Api
{
    /// <summary>
    ///  Class for testing {{classname}}
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class {{classname}}Tests : IDisposable
    {
        {{^nonPublicApi}}
        private {{classname}} instance;

        {{/nonPublicApi}}
        public {{classname}}Tests()
        {
            {{^nonPublicApi}}
            instance = new {{classname}}("http://localhost:5000");
            {{/nonPublicApi}}
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of {{classname}}
        /// </summary>
        [Fact]
        public void {{operationId}}InstanceTest()
        {
            Assert.IsType<{{classname}}>(instance);
        }
        {{#operations}}
        {{#operation}}

        /// <summary>
        /// Test {{operationId}}
        /// </summary>
        [Fact]
        public void {{operationId}}Test()
        {
            var numRuns = 0;
            var numExamples = 1;
            var minLength = 0;
            var maxLength = 10;
            var count = 0;
            while (numRuns < numExamples) {
                numRuns += 1;
                {{#allParams}}
                {{#vendorExtensions.x-regex}}
                {{{dataType}}} {{paramName}} = default;
                minLength = {{#schema.minLength}}{{schema.minLength}}{{/schema.minLength}}{{^schema.minLength}}0{{/schema.minLength}};
                maxLength = {{#schema.maxLength}}{{schema.maxLength}}{{/schema.maxLength}}{{^schema.maxLength}}10{{/schema.maxLength}};
                // the following is necessary to avoid url becoming longer than acceptable length
                if (maxLength > 20) {
                    maxLength = 20;
                }
                count = 0;
                while (true)
                {
                    count += 1;
                    {{paramName}} = new Xeger(@"{{{vendorExtensions.x-regex}}}").Generate();
                    if ({{paramName}}.Length >= minLength && {{paramName}}.Length <= maxLength)
                    {
                        break;
                    }
                    if (count > 100)
                    {
                        throw new Exception(
                            "unable to generate random value for parameter {{paramName}} which matches the constraints");
                    }
                }
                {{/vendorExtensions.x-regex}}
                {{^vendorExtensions.x-regex}}
                {{#isPrimitiveType}}
                {{{dataType}}} {{paramName}} = {{{example}}};
                {{/isPrimitiveType}}
                {{^isPrimitiveType}}
                {{#content}}
                var openapiSpecPath = Environment.GetEnvironmentVariable("OPENAPI_SPEC_PATH");
                var openapiSpecJson = System.IO.File.ReadAllText(openapiSpecPath);
                var method = Regex.Replace("{{httpMethod}}", "Http", "").ToLower();
                JToken jsonContent = JObject.Parse(openapiSpecJson)["paths"]["{{path}}"][method]["requestBody"]["content"]["application/json"];
                {{{dataType}}} {{paramName}} = default;
                if (jsonContent["example"] != null)
                {
                    var example = jsonContent["example"];
                    {{paramName}} = example.ToObject<{{dataType}}>();
                } 
                else if (jsonContent["examples"] != null)
                {
                    var examples = jsonContent["examples"].Values().ToArray();
                    var example = examples[numRuns - 1];
                    {{paramName}} = example["value"].ToObject<{{dataType}}>();
                    numExamples = examples.Count();
                }
                {{/content}}
                {{^content}}
                {{{dataType}}} {{paramName}} = JsonConvert.DeserializeObject<{{dataType}}>("""{{{example}}}""");
                {{/content}}
                {{/isPrimitiveType}}
                {{/vendorExtensions.x-regex}}
                {{/allParams}}
                {{#returnType}}var response = {{/returnType}}instance.{{operationId}}({{#allParams}}{{paramName}}{{^-last}}, {{/-last}}{{/allParams}});
                {{#returnType}}
                Assert.NotNull(response);
                {{/returnType}}
            }
        }
        {{/operation}}
        {{/operations}}
    }
}
